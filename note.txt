npm i express bcrypt body-parser cloudinary cookie-parser cors dotenv formidable@2.1.1 jsonwebtoken moment mongoose socket.io stripe uuid

npm i nodemon -D

express	Framework cho Node.js để xây dựng ứng dụng web và API. Cung cấp các phương thức và middleware dễ sử dụng.
bcrypt	Thư viện để mã hóa và so sánh mật khẩu, bảo vệ thông tin người dùng.
body-parser	Middleware để phân tích dữ liệu POST trong request. Giúp đọc dữ liệu từ req.body.
cloudinary	Dịch vụ lưu trữ và xử lý hình ảnh/video trực tuyến. Thường được sử dụng để upload và quản lý media.
cookie-parser	Middleware để phân tích cookie trong request, giúp dễ dàng truy cập và sử dụng cookie.
cors	Middleware cho phép Cross-Origin Resource Sharing (CORS), cho phép client từ các domain khác truy cập API.
dotenv	Thư viện để quản lý biến môi trường từ file .env. Giúp bảo mật thông tin nhạy cảm (như API keys).
formidable@2.1.1	Thư viện để xử lý form với file upload, thường được sử dụng trong các ứng dụng web để tải lên tệp.
jsonwebtoken	Thư viện để tạo và xác thực JSON Web Tokens (JWT), thường dùng để bảo vệ các route và xác thực người dùng.
moment	Thư viện để xử lý ngày tháng, giúp định dạng và thao tác với thời gian một cách dễ dàng.
mongoose	Thư viện ORM cho MongoDB, giúp quản lý kết nối và thao tác với cơ sở dữ liệu MongoDB dễ dàng hơn.
socket.io	Thư viện cho việc giao tiếp thời gian thực giữa client và server qua WebSockets, thường dùng trong ứng dụng chat hoặc real-time updates.
stripe	API cho việc xử lý thanh toán trực tuyến. Cung cấp các công cụ để tích hợp thanh toán vào ứng dụng.
uuid	Thư viện để tạo UUID (Universally Unique Identifier), thường dùng để tạo các ID duy nhất cho các đối tượng.


Trong RESTful API, các tên endpoint và phương thức HTTP cần được đặt theo chuẩn để dễ hiểu, thống nhất, và đúng với ngữ nghĩa. Dưới đây là một hướng dẫn cho việc đặt tên theo chuẩn RESTful API:

1. Sử dụng danh từ số nhiều để biểu thị tài nguyên
Sử dụng danh từ số nhiều cho các tài nguyên (resources), như products, categories, users, v.v.

Ví dụ:

/products: Lấy danh sách tất cả sản phẩm hoặc thêm sản phẩm mới.
/products/{id}: Lấy, cập nhật hoặc xóa một sản phẩm cụ thể.
2. Sử dụng phương thức HTTP để xác định hành động
Dùng các phương thức HTTP để chỉ rõ hành động:

GET: Lấy dữ liệu.
POST: Tạo tài nguyên mới.
PUT: Cập nhật toàn bộ tài nguyên.
PATCH: Cập nhật một phần tài nguyên.
DELETE: Xóa tài nguyên.
3. Ví dụ cụ thể cho API sản phẩm (products)
HTTP Method	Endpoint	Mô tả
GET	/products	Lấy danh sách tất cả sản phẩm.
POST	/products	Tạo một sản phẩm mới.
GET	/products/{id}	Lấy thông tin sản phẩm với id cụ thể.
PUT	/products/{id}	Cập nhật thông tin sản phẩm (toàn bộ).
PATCH	/products/{id}	Cập nhật một phần thông tin sản phẩm.
DELETE	/products/{id}	Xóa sản phẩm với id cụ thể.
4. Xử lý các tài nguyên con (Nested Resources)
Sử dụng nested resources khi một tài nguyên phụ thuộc vào tài nguyên chính.

Ví dụ với subcategories của category:

Lấy danh sách subcategories của một category: GET /categories/{categoryId}/subcategories
Thêm mới một subcategory vào một category: POST /categories/{categoryId}/subcategories
Xóa một subcategory: DELETE /categories/{categoryId}/subcategories/{subCategoryId}
5. Áp dụng bộ lọc, tìm kiếm, phân trang bằng query parameters
Sử dụng query parameters để thực hiện tìm kiếm, lọc, và phân trang:

/products?search=phone&page=1&limit=10
/categories?sort=name&order=asc
6. Đặt tên cho các hành động cụ thể
Nếu cần thực hiện hành động đặc biệt, thêm các endpoint rõ nghĩa, nhưng giữ dạng động từ ở mức tối thiểu:

/products/{id}/publish (để đăng một sản phẩm)
/products/{id}/archive (để lưu trữ sản phẩm)
7. Ví dụ RESTful API cho sản phẩm và danh mục
plaintext
Copy code
GET /products                      -> Lấy tất cả sản phẩm
POST /products                     -> Tạo mới sản phẩm
GET /products/{id}                 -> Lấy sản phẩm theo ID
PUT /products/{id}                 -> Cập nhật sản phẩm theo ID
DELETE /products/{id}              -> Xóa sản phẩm theo ID

GET /categories                    -> Lấy tất cả danh mục
POST /categories                   -> Tạo mới danh mục
GET /categories/{id}               -> Lấy danh mục theo ID
PUT /categories/{id}               -> Cập nhật danh mục theo ID
DELETE /categories/{id}            -> Xóa danh mục theo ID

GET /categories/{categoryId}/subcategories      -> Lấy tất cả subcategories của category
POST /categories/{categoryId}/subcategories     -> Tạo subcategory trong category
DELETE /categories/{categoryId}/subcategories/{subCategoryId} -> Xóa subcategory theo ID
Tóm lại
Đặt tên RESTful API rõ ràng, mô tả đúng tài nguyên, và phân biệt hành động bằng phương thức HTTP sẽ giúp API dễ hiểu và dễ bảo trì.

